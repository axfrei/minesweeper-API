package com.deviget.minesweeper.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType;
import com.deviget.minesweeper.error.MinesweeperApiException;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;

@DynamoDBTable(tableName = "Games")
@Data
@AllArgsConstructor
@Builder
public class Game {

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "id")
    private String id;

    @DynamoDBAttribute(attributeName = "user")
    private User user;

    @DynamoDBAttribute(attributeName = "cells")
    private List<Cell> cells;

    @DynamoDBTyped(DynamoDBAttributeType.S)
    @DynamoDBAttribute(attributeName = "status")
    private GameStatus status;

    @DynamoDBAttribute(attributeName = "creationTime")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    private Date creationTime;

    @DynamoDBAttribute(attributeName = "lastUpdate")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.ALWAYS)
    private Date lastUpdate;

    public Game() {
    }

    public Game initCells(int columns, int rows, int bombs) {

        Random random = new Random();
        this.cells = new ArrayList<Cell>();

        if(columns*rows <= bombs){
            throw new MinesweeperApiException("Invalid request. Amount of bombs should be less than total amount of cells");
        }

        // lets create cells and asing bombs :D
        //TODO revisar xq no me asegura la cantidad exacta de bombas
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                cells.add(Cell.builder().x(r).y(c).bomb(random.nextBoolean() && (bombs-- > 0)).build());
            }
        }

        // lets calculate the value for each cell
        cells.stream().map(cellToInit -> {
            int value = getAdjacentCellsStream(cellToInit).map(c -> c.isBomb() ? 1 : 0).reduce(0, Integer::sum);
            cellToInit.setValue(value);
            return cellToInit;
        }).collect(Collectors.toList());

        return this;
    }


    private Stream<Cell> getAdjacentCellsStream(Cell cell) {
        return cells.stream().filter(c -> c.isAdjacentTo(cell));
    }


    public void pause() {
        this.setStatus(this.status.pause());
    }

	public Integer getBombs() {
		return cells.stream().map(c -> c.isBomb() ? 1 : 0).reduce(0, Integer::sum);
	}
}
